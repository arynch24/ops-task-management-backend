import { prisma } from '../config/db';
import { config } from '../config';
import { format } from 'date-fns';
import ses from '../config/sesClient';

export async function sendDailyReport() {
    const today = new Date();
    const startOfDay = new Date(Date.UTC(today.getUTCFullYear(), today.getUTCMonth(), today.getUTCDate(), 0, 0, 0, 0));
    const endOfDay = new Date(Date.UTC(today.getUTCFullYear(), today.getUTCMonth(), today.getUTCDate(), 23, 59, 59, 999));

    // 1. Get all task assignments for today
    const assignments = await prisma.taskAssignment.findMany({
        where: {
            schedule: { scheduledDate: { gte: startOfDay, lt: endOfDay } }
        },
        include: {
            task: {
                include: {
                    category: true,
                    subcategory: true
                }
            },
            assignedToUser: {
                select: {
                    firstName: true,
                    lastName: true,
                    email: true
                }
            }
        },
        orderBy: [
            { task: { category: { name: 'asc' } } },
            { task: { subcategory: { name: 'asc' } } },
            { completedAt: 'asc' }
        ]
    });

    // 2. Group by Category ‚Üí Subcategory ‚Üí Task
    const report: any = {};

    for (const a of assignments) {
        const category = a.task.category?.name || 'Uncategorized';
        const subcategory = a.task.subcategory?.name || 'General';
        const taskTitle = a.task.title;

        if (!report[category]) report[category] = {};
        if (!report[category][subcategory]) report[category][subcategory] = {};
        if (!report[category][subcategory][taskTitle]) report[category][subcategory][taskTitle] = [];

        report[category][subcategory][taskTitle].push({
            assignee: `${a.assignedToUser.firstName} ${a.assignedToUser.lastName}`,
            status: a.status,
            value: a.parameterValue || 'N/A',
            unit: a.task.parameterUnit || '',
            label: a.task.parameterLabel || 'Value',
            comment: a.comment || '-',
            completedAt: a.completedAt ? format(new Date(a.completedAt), 'HH:mm') : '-'
        });
    }

    // 3. Generate HTML Report
    let html = `
    <h1>üìÖ Daily Monitoring Report - ${format(new Date(), 'PPP')}</h1>
    <p><strong>Total Assignments for Today:</strong> ${assignments.length}</p>
    <hr/>
  `;

    for (const [category, subcats] of Object.entries(report as any)) {
        html += `<h2>üìÅ ${category}</h2>`;
        for (const [subcategory, tasks] of Object.entries(subcats as any)) {
            html += `<h3>üóÇÔ∏è ${subcategory}</h3>`;
            for (const [taskTitle, entries] of Object.entries(tasks as any)) {
                html += `<details open><summary><strong>${taskTitle}</strong></summary>`;
                html += `<table border="1" cellpadding="5" cellspacing="0" style="width:100%; border-collapse: collapse; margin: 10px 0;">
          <thead>
            <tr style="background: #f2f2f2;">
              <th>Assignee</th>
              <th>Status</th>
              <th>${(entries as any[])[0]?.label}</th>
              <th>Comment</th>
              <th>Time</th>
            </tr>
          </thead>
          <tbody>`;
                (entries as any[]).forEach((e: any) => {
                    html += `
            <tr>
              <td>${e.assignee}</td>
              <td>${e.status}</td>
              <td>${e.value} ${e.unit}</td>
              <td>${e.comment}</td>
              <td>${e.completedAt}</td>
            </tr>`;
                });
                html += `</tbody></table></details>`;
            }
        }
    }

    html += `<footer style="margin-top: 30px; color: #777; font-size: 0.9em;">
    <p><em>Generated by Ops Task Management System.</em></p>
  </footer>`;

    // 4. Parse multiple admin emails
    const adminEmails = await prisma.user.findMany({
        where: { role: 'ADMIN' },
        select: { email: true }
    }).then(users => users.map(u => u.email));

    if (adminEmails.length === 0) {
        throw new Error('No admin emails configured');
    }

    // 5. Send via SES to all admins
    const params = {
        Source: config.emailFrom,
        Destination: {
            ToAddresses: adminEmails // Send to multiple admins
        },
        Message: {
            Subject: { Data: `Daily Monitoring Report - ${format(new Date(), 'PPP')}` },
            Body: { Html: { Data: html } }
        }
    };

    await ses.sendEmail(params as any).promise();
    console.log(`Daily report sent successfully to ${adminEmails.length} admins`);
}